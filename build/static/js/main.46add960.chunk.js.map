{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","undefined","USDcur","setUSDcur","RURcur","setRURcur","EURcur","setEURcur","USDarr","setUSDarr","setRURarr","EURarr","setEURarr","errorMes","setErrorMes","useEffect","Date","timerId","setInterval","startD","url","a","axios","get","data","Valute","USD","Value","prevArr","x","y","RUR","EUR","console","log","message","getDataFromAPI","getCurrency","clearInterval","className","style","backgroundColor","height","width","yDomain","stroke","tickFormat","d","date","getHours","getMinutes","title","line","ticks","text","fill","fontWeight","tickTotal","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.46add960.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport {XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries} from 'react-vis';\n\n/*const arr = [\n  {x:1, y:10},\n  {x:2, y:15},\n  {x:3, y:12},\n  {x:4, y:17},\n  {x:5, y:15}\n]*/\n\nconst App = () => {\n\n  // хуки для хранения текущих курсов валют \n  const [USDcur, setUSDcur] = useState(undefined);\n  const [RURcur, setRURcur] = useState(undefined);\n  const [EURcur, setEURcur] = useState(undefined);\n\n  // хуки для хранения массивов курсов валют\n  const [USDarr, setUSDarr] = useState([]);\n  const [RURarr, setRURarr] = useState([]);\n  const [EURarr, setEURarr] = useState([]);\n\n  const [errorMes, setErrorMes] = useState(undefined);\n\n  // основная функция чтения курсов из АПИ и складывания их в хуки\n  const getCurrency = (startD) => {\n\n    async function getDataFromAPI(url) {\n      try {\n        const data = await axios.get(url);\n\n        if (data.data && data.data.Valute && data.data.Valute.USD && data.data.Valute.USD.Value) {\n          setUSDcur(data.data.Valute.USD.Value);\n          setUSDarr(prevArr => [...prevArr, {x : (new Date()), y : data.data.Valute.USD.Value}]);\n        } else {\n          setUSDcur(undefined)\n        }\n        \n        if (data.data && data.data.Valute && data.data.Valute.RUR && data.data.Valute.RUR.Value) {\n          setRURcur(data.data.Valute.RUR.Value);\n          setRURarr(prevArr => [...prevArr, {x : (new Date()), y : data.data.Valute.RUR.Value}]);\n        } else {\n          setRURcur(undefined);\n        }\n\n        if (data.data && data.data.Valute && data.data.Valute.EUR && data.data.Valute.EUR.Value) {\n          setEURcur(data.data.Valute.EUR.Value);\n          setEURarr(prevArr => [...prevArr, {x : (new Date()), y : data.data.Valute.EUR.Value}]);\n        } else {\n          setEURcur(undefined);\n        }\n      } catch(error) {\n        console.log(error);\n        error.message ? setErrorMes(error.message) : setErrorMes('Ошибка запроса данных');\n      };\n    }\n    getDataFromAPI('https://www.cbr-xml-daily.ru/daily_json.js');\n  }\n\n  useEffect(\n    () => {\n      const startDate = new Date();\n      const timerId = setInterval(\n        () => {\n          getCurrency(startDate);\n        },\n        5000\n      );\n      return () => {\n        clearInterval(timerId);\n      }\n    },\n    []\n  )\n\n  return (\n    <div className=\"App\">\n      <div>\n        <table>\n          <caption>Таблица курсов валют</caption>\n          <thead>\n            <tr>\n              <th style={{backgroundColor:'red'}}>\n                USD\n              </th>\n              <th>\n                RUR\n              </th>\n              <th style={{backgroundColor:'green'}}>\n                EUR\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                {USDcur ? USDcur : '=='}\n              </td>\n              <td>\n                {RURcur ? RURcur : '=='}\n              </td>\n              <td>\n                {EURcur ? EURcur : '=='}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        \n      </div>\n      <hr />\n      {errorMes &&\n        <h2 className='error-mes'>{errorMes}</h2>\n      }\n      {!errorMes &&\n        <XYPlot height={300} width= {800} yDomain={[0, 100]} className='trend-area' >\n          <VerticalGridLines style={{stroke: '#B7E9ED'}} />\n          <HorizontalGridLines style={{stroke: '#B7E9ED'}} />\n          <XAxis \n              tickFormat={function tickFormat(d){\n                const date = new Date(d)\n                return date.getHours() + ':' + date.getMinutes()\n                }}\n              title=\"Время\"\n              style={{\n                line: {stroke: '#ADDDE1'},\n                ticks: {stroke: '#ADDDE1'},\n                text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n              }}\n              tickTotal={10}\n          />\n          <YAxis \n            \n          />\n          <LineSeries\n            className=\"USD\"\n            color = \"red\"\n            data={USDarr} \n          />\n\n          <LineSeries\n            className=\"EUR\"\n            color = \"green\"\n            data={EURarr} \n          />\n        </XYPlot>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}